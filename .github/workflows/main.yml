name: ci-test-perf-security

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

# Cancel older runs for the same ref when new commits arrive
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/i4m-agh0ri/invoice_portal
  # Optional toggles via repo Settings → Variables → Actions
  ENABLE_PIP_AUDIT: 'true'   # set 'false' to skip Python dep audit
  ENABLE_BANDIT: 'true'     # set 'true' to run Bandit if Python project
  ENABLE_TRIVY: 'true'       # image vulnerability scan (recommended)

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Example Python toolchain; safe to keep even if not Python ---
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Python deps (if present)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -q pytest || true

      - name: Run unit/integration tests
        run: |
          if command -v pytest >/dev/null 2>&1 && [ -d tests ]; then
            pytest -q
          else
            echo "No pytest or tests/ directory found — skipping tests"
          fi

  perf:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build image (local only, no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run container locally (no health check)
        run: |
          docker run -d --rm \
            -p 8080:8080 \
            --name perf-under-test \
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          # brief startup delay
          sleep 8

      - name: Install k6
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg ca-certificates
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6

      - name: Run perf test (optional)
        env:
          TARGET: http://localhost:8080/
        run: |
          if [ -f perf/test.js ]; then
            k6 run perf/test.js
          else
            echo "No perf/test.js — skipping performance test"
          fi

      - name: Stop container
        if: always()
        run: docker rm -f perf-under-test || true

  security:
    runs-on: ubuntu-latest
    needs: perf
    steps:
      - uses: actions/checkout@v4

      # ---------- Python dependency audit (pip-audit) ----------
      - name: Setup Python
        if: ${{ env.ENABLE_PIP_AUDIT == 'true' || vars.ENABLE_PIP_AUDIT == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: pip-audit (SBOM+vuln for Python deps)
        if: ${{ env.ENABLE_PIP_AUDIT == 'true' || vars.ENABLE_PIP_AUDIT == 'true' }}
        run: |
          pip install -q pip-audit || true
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt
          else
            echo "No requirements.txt — skipping pip-audit"
          fi

      # ---------- Optional Bandit (Python SAST) ----------
      - name: Bandit (static analysis)
        if: ${{ env.ENABLE_BANDIT == 'true' || vars.ENABLE_BANDIT == 'true' }}
        run: |
          pip install -q bandit || true
          if [ -d src ] || [ -d app ] || [ -f setup.py ] || [ -f pyproject.toml ]; then
            bandit -r . -x tests || true
          else
            echo "No Python source detected — skipping Bandit"
          fi

      # ---------- Build image for vulnerability scanning ----------
      - name: Compute tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build image (local, for scanning)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}

      # ---------- Container image vulnerability scan (Trivy) ----------
      - name: Trivy image scan (fail on HIGH/CRITICAL)
        if: ${{ env.ENABLE_TRIVY == 'true' || vars.ENABLE_TRIVY == 'true' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Show resulting image(s)
        run: docker images | head -n 20

