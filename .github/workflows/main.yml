name: ci-cd

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/i4m-agh0ri/invoice_portal

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Example: Python tests. Adjust to your stack or remove if N/A.
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -q pytest || true

      - name: Unit & integration tests
        run: |
          if command -v pytest >/dev/null 2>&1 && [ -d tests ]; then pytest -q; else echo "No pytest/tests, skipping"; fi

  perf:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build image (for perf test)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}

      - name: Run container locally (no health check)
        run: |
          docker run -d --rm \
            -p 8080:8080 \
            --name perf-under-test \
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          # allow brief startup time
          sleep 8

      - name: Install k6
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg ca-certificates
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6

      - name: Run perf test (optional)
        env:
          TARGET: http://localhost:8080/
        run: |
          if [ -f perf/test.js ]; then k6 run perf/test.js; else echo "No perf/test.js, skipping"; fi

      - name: Stop container
        if: always()
        run: docker rm -f perf-under-test || true

  build_push:
    runs-on: ubuntu-latest
    needs: perf
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      # Optional SBOM
      - name: SBOM (Syft)
        if: ${{ env.ENABLE_SBOM == 'true' || secrets.ENABLE_SBOM == 'true' }}
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      # Optional vuln scan (fail on HIGH/CRITICAL)
      - name: Trivy scan
        if: ${{ env.ENABLE_TRIVY == 'true' || secrets.ENABLE_TRIVY == 'true' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy:
    runs-on: ubuntu-latest
    needs: build_push
    steps:
      - uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust host key
        run: ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Blue/green replace on target (no health check)
        env:
          IMAGE_NAME: ghcr.io/i4m-agh0ri/invoice_portal
          SHA: ${{ github.sha }}
        run: |
          SHORT=${SHA::7}
          ssh -o StrictHostKeyChecking=yes ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} <<'EOF'
            set -euo pipefail
            IMAGE_NAME="'"$IMAGE_NAME"'"
            TAG_SHORT="'"$SHORT"'"

            # Pull the new image (using short SHA tag, fallback to latest if needed)
            docker pull "$IMAGE_NAME:$TAG_SHORT" || docker pull "$IMAGE_NAME:latest"

            NEW="invoice-portal-$TAG_SHORT"
            OLD=$(docker ps --filter "name=^invoice-portal-" --format '{{.Names}}' | head -n 1 || true)

            # Run the new container (adjust published ports/env/volumes as needed)
            docker run -d \
              --name "$NEW" \
              --restart always \
              -p 80:8080 \
              "$IMAGE_NAME:$TAG_SHORT"

            # No health gate; proceed immediately

            # Stop/remove old if present
            if [ -n "$OLD" ]; then docker rm -f "$OLD" || true; fi

            # Maintain a stable container name
            if docker ps -a --format '{{.Names}}' | grep -q '^invoice-portal$'; then
              docker rm -f invoice-portal || true
            fi
            docker rename "$NEW" invoice-portal
          EOF
